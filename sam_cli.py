"""
Generic class to build, package and deploy SAM applications
"""
import shlex
import logging
import subprocess


class SAMCLIException(Exception):
    pass


class SAMCLI:
    """
    AWS SAM CLI commands to build, deploy, package sam application on AWS
    """
    @classmethod
    def _execute_cmd(cls, cmd):
        """
        Generic method to execute different commands.
        :param cmd: Command to execute
        :return: process output
        """
        print("\n")
        logging.info("CMD to be executed : " + str(cmd))
        cmd = shlex.split(cmd)
        process = subprocess.run(cmd,
                                 stdout=subprocess.PIPE,
                                 stderr=subprocess.PIPE,
                                 universal_newlines=True,
                                 shell=True)
        logging.info("Process output : " + process.stdout)
        return process

    def runUnitTests(self):
        """
        Method to run Unit-Tests before SAM Deployment
        """
        cmd = "python -m pytest"
        process_result = self._execute_cmd(cmd)
        if process_result.returncode:
            raise SAMCLIException("ERROR: Unit-Tests failed {}".format(process_result.stderr))

    def build(self, template_file, aws_region, build_dir,
              base_dir=None, parameters=None, manifest=None,
              debug=False):
        """
        Use this command to build your Lambda source code and generate
        deployment artifacts that target Lambda's execution environment

        :param template_file: The AWS SAM template file.
        :param aws_region: Sets the AWS Region of the service (e.g, us-east-1)
        :param base_dir: Use this if the AWS SAM template and your source code
                         aren't in the same enclosing folder.
                         By default, relative paths are resolved with
                         respect to the template's location.
        :param build_dir: Path to a folder where the built artifacts are stored
        :param parameters: Optional. Dictionary containing AWS CloudFormation
                           parameter overrides, encoded as key-value pairs.
                           Use the format â€”for example,
                           {
                               'key': 'Value'
                           }
        :param manifest: The path to a custom dependency manifest
                         (ex: requirements.txt) to use.
        :param debug: Turns on/off debug logging to print debug message
                      generated by the AWS SAM CLI
        """
        cmd = "sam build --template {} --region {} --build-dir {}".format(
            template_file, aws_region, build_dir)

        if parameters:
            cmd += " --parameter-overrides"
            for ParameterKey, ParameterValue in parameters.items():
                cmd += " ParameterKey={},ParameterValue={}".format(
                    ParameterKey, ParameterValue)

        if base_dir:
            cmd += " --base-dir {}".format(base_dir)

        if manifest:
            cmd += " --manifest {}".format(manifest)

        if debug:
            cmd += " --debug"

        process_result = self._execute_cmd(cmd)
        if process_result.returncode:
            raise SAMCLIException("ERROR: SAM Build failed {}".format(process_result.stderr))

    def package(self, template_file_path, s3_bucket_name,
                output_template_file_path, aws_region, s3_prefix=None,
                debug=False):
        """
        Packages an AWS SAM application. It creates a ZIP file of your code
        and dependencies, and uploads it to Amazon S3
        :param template_file_path: Path where your AWS SAM template is located
        :param s3_bucket_name: Required. The name of the S3 bucket where this
                                command uploads the artifacts that are
                                referenced in your template.
        :param output_template_file_path: The path to the file where the
                        command writes the packaged template.
                        If you don't specify a path, the command writes
                        the template to the standard output.
        :param aws_region: Sets the AWS Region of the service (eg, us-east-1)
        :param s3_prefix: Prefix added to the artifacts name that are
                            uploaded to the Amazon S3 bucket.
         The prefix name is a path name (folder name) for the Amazon S3 bucket.
        :param debug: Turns on/off debug logging.
        """
        cmd = "sam package --template-file {} --s3-bucket {} --output-template-file {} --region {}".format(
            template_file_path, s3_bucket_name,
            output_template_file_path, aws_region)

        if s3_prefix:
            cmd += " --s3-prefix {}".format(s3_prefix)

        if debug:
            cmd += " --debug"

        process_result = self._execute_cmd(cmd)
        if process_result.returncode:
            raise SAMCLIException("ERROR: SAM Package failed {}".format(process_result.stderr))

    def deploy(self, output_template_file_path, stack_name, s3_bucket,
               aws_region, s3_prefix=None,
               capabilities="CAPABILITY_IAM", parameters=None,
               debug=False, tags=None):
        """
        Deploys an AWS SAM application.

        :param output_template_file_path: Path where your AWS SAM
                                            template is located
        :param stack_name: Name of the AWS CloudFormation stack is deploying to
                            If you specify an existing stack,
                            the command updates the stack.
                            If you specify a new stack, the command creates it.
         :param s3_bucket:
        :param aws_region: The AWS Region to deploy to (for example, us-east-1)
        :param s3_prefix: Prefix added to the artifacts name that are
         uploaded to the Amazon S3 bucket.
         The prefix name is a path name (folder name) for the Amazon S3 bucket.
        :param capabilities: A list of capabilities that you must specify to
        allow AWS CloudFormation to create certain stacks.
        The only valid values are CAPABILITY_IAM and CAPABILITY_NAMED_IAM.
        :param parameters: A string that contains AWS CloudFormation parameter
        overrides encoded as key=value pairs. e.g.
                            {
                               'key': 'Value'
                            }
        :param debug: Turns on/off debug logging.
        :param tags
        """
        cmd = "sam deploy --template-file {} --stack-name {} --capabilities {} --region {} --s3-bucket {} --no-fail-on-empty-changeset".format(
            output_template_file_path, stack_name,
            capabilities, aws_region, s3_bucket)

        if s3_prefix:
            cmd += " --s3-prefix {}".format(s3_prefix)

        if parameters:
            cmd += " --parameter-overrides"
            for ParameterKey, ParameterValue in parameters.items():
                cmd += " ParameterKey={},ParameterValue={}".format(
                    ParameterKey, ParameterValue)

        if tags:
            cmd += " --tags"
            for key, value in tags.items():
                cmd += " {}={}".format(key, value)

        if debug:
            cmd += " --debug"

        process_result = self._execute_cmd(cmd)
        if process_result.returncode:
            raise SAMCLIException("ERROR: SAM Deploy failed {}".format(process_result.stderr))
